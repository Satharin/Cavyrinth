package com.example.rafal.gra;

import android.app.AlertDialog;
import android.content.DialogInterface;
import android.content.Intent;
import android.content.SharedPreferences;
import android.support.v7.app.AppCompatActivity;
import android.os.Bundle;
import android.text.method.ScrollingMovementMethod;
import android.view.View;
import android.widget.Button;
import android.widget.TextView;

import java.util.ArrayList;

public class MainActivity extends AppCompatActivity {

    Postac postac;
    Przedmioty miecz_0, miecz_1, miecz_2, tarcza_0, tarcza_1, tarcza_2;
    ArrayList<Integer> tabelaExpa = new ArrayList<Integer>();
    ArrayList<Integer> tabelamExpa = new ArrayList<Integer>();
    int checkLvlAdvance, checkMlvlAdvance;

    //Przy uruchomieniu
    @Override
    public void onCreate(Bundle savedInstanceState) {

        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        //Itemy
        miecz_0 = new Przedmioty("Sword+0", 20, 10, 20);
        miecz_1 = new Przedmioty("Sword+1", 23, 11, 15);
        miecz_2 = new Przedmioty("Sword+2", 26, 12, 10);
        tarcza_0 = new Przedmioty("Shield+0", 0, 20, 20);
        tarcza_1 = new Przedmioty("Shield+1", 0, 25, 15);
        tarcza_2 = new Przedmioty("Shield+2", 0, 30, 10);

        //Postać
        postac = new Postac("Satharius", 200, 200, 1, 0, 0, 0, 5, 5, miecz_0.name, tarcza_0.name,
                0, 0, 5, 10, 5, 5);

        //Wczytanie gry
        odczyt();

        //Zapis gry
        zapis();

        //Zapełnienie tabeli expa
        fillExp();

        //Zapełnienie tabeli magic expa
        fillmExp();
    }

    //Sprawdzenie czy na pewno wyjść z gry
    public void showAlert(View view) {

        AlertDialog.Builder exit = new AlertDialog.Builder(this);

        exit.setMessage("Are you sure you want to close application?")
                .setNegativeButton("Yes", new DialogInterface.OnClickListener() {
                    @Override
                    public void onClick(DialogInterface dialog, int which) {
                        finish();
                        System.exit(0);
                    }
                })
                .setPositiveButton("No", new DialogInterface.OnClickListener() {
                    @Override
                    public void onClick(DialogInterface dialog, int which) {
                        dialog.dismiss();
                    }
                })
                .create();
        exit.show();

    }

    //Zapisanie gry
    public void zapis() {

        SharedPreferences saveGame = getSharedPreferences("Save", MODE_PRIVATE);
        SharedPreferences.Editor save = saveGame.edit();
        save.putInt("hp", postac.hp);
        save.putInt("mana", postac.mana);
        save.putInt("lvl", postac.lvl);
        save.putInt("mlvl", postac.mlvl);
        save.putInt("exp", postac.exp);
        save.putInt("mExp", postac.mExp);
        save.putInt("atk", postac.atk);
        save.putInt("def", postac.def);
        save.putString("sword", postac.sword);
        save.putString("shield", postac.shield);
        save.putInt("money", postac.money);
        save.putInt("checkLvlAdvance", checkLvlAdvance);
        save.putInt("checkMlvlAdvance", checkMlvlAdvance);
        save.putInt("sp", postac.sp);
        save.putInt("crit", postac.crit);
        save.putInt("critChance", postac.critChance);
        save.putInt("hpotion", postac.hpotion);
        save.putInt("mpotion", postac.mpotion);
        save.apply();

    }

    //Wczytanie gry
    public void odczyt() {

        SharedPreferences loadGame = getSharedPreferences("Save", MODE_PRIVATE);
        SharedPreferences.Editor load = loadGame.edit();
        postac.hp = loadGame.getInt("hp", 200);
        postac.mana = loadGame.getInt("mana", 200);
        postac.lvl = loadGame.getInt("lvl", 1);
        postac.mlvl = loadGame.getInt("mlvl", 0);
        postac.exp = loadGame.getInt("exp", 0);
        postac.mExp = loadGame.getInt("mExp", 0);
        postac.atk = loadGame.getInt("atk", 5);
        postac.def = loadGame.getInt("def", 5);
        postac.sword = loadGame.getString("sword", "Sword+0");
        postac.shield = loadGame.getString("shield", "Shield+0");
        postac.money = loadGame.getInt("money", 0);
        postac.sp = loadGame.getInt("sp", 0);
        postac.crit = loadGame.getInt("crit", 5);
        postac.critChance = loadGame.getInt("critChance", 10);
        checkLvlAdvance = loadGame.getInt("checkLvlAdvance", 1);
        checkMlvlAdvance = loadGame.getInt("checkMlvlAdvance", 0);
        postac.hpotion = loadGame.getInt("hpotion", 5);
        postac.mpotion = loadGame.getInt("mpotion", 5);

    }

    //Wyświetlenie statystyk postaci
    public void statystyki(View view) {

        //Odświeżenie statystyk
        odswiez();

        //Zerowanie i scrollowanie okna do tekstu
        TextView staty = (TextView) findViewById(R.id.maintext);
        staty.setMovementMethod(new ScrollingMovementMethod());
        staty.clearComposingText();
        staty.scrollTo(0, 0);

        //Wprowadzenie i wyświetlenie tekstu
        StringBuilder statystyki = new StringBuilder("");
        statystyki.append("Name: " + postac.name + "\n");
        statystyki.append("Health points: " + postac.hp.toString() + "\n");
        statystyki.append("Mana points: " + postac.mana.toString() + "\n");
        statystyki.append("Level: " + postac.lvl.toString() + "\n");
        statystyki.append("Magic level: " + postac.mlvl.toString() + "\n");
        statystyki.append("Experience: " + postac.exp.toString() + "\n");
        statystyki.append("Gold: " + postac.money.toString());
        staty.setText(statystyki);

    }

    //Wyświetlenie statystyk postaci
    public void equipment(View view) {

        //Odświeżenie statystyk
        //odswiez();

        //Zerowanie i scrollowanie okna do tekstu
        TextView staty = (TextView) findViewById(R.id.maintext);
        staty.setMovementMethod(new ScrollingMovementMethod());
        staty.clearComposingText();
        staty.scrollTo(0, 0);

        //Wprowadzenie i wyświetlenie tekstu
        StringBuilder statystyki = new StringBuilder("");
        statystyki.append("Helmet: \n");
        statystyki.append("Armor: \n");
        statystyki.append("Legs: \n");
        statystyki.append("Boots: \n");
        statystyki.append("Weapon: " + postac.sword + "\n");
        statystyki.append("Shield: " + postac.shield + "\n");
        statystyki.append("Amulet: \n");
        statystyki.append("Ring: \n");
        statystyki.append("Health potions: " + Integer.toString(postac.hpotion) + "\n");
        statystyki.append("Mana potions: " + Integer.toString(postac.mpotion) + "\n");

        staty.setText(statystyki);

    }

    //Przejście do aktywności Poluj
    public void poluj(View view) {

        //Odświeżenie statystyk
        odswiez();

        //Wyczyszczenie TextView staty
        TextView staty = (TextView) findViewById(R.id.maintext);
        staty.clearComposingText();
        staty.scrollTo(0,0);

        startActivity(new Intent(getApplicationContext(), PolujActivity.class));
        finish();

    }

    //Przejście do aktywności Skills
    public void skills(View view) {

        //Odświeżenie statystyk
        odswiez();

        //Wyczyszczenie TextView staty
        TextView staty = (TextView) findViewById(R.id.maintext);
        staty.clearComposingText();
        staty.scrollTo(0,0);

        startActivity(new Intent(getApplicationContext(), SkillsActivity.class));
        finish();

    }

    //Wypełnienie tabeli expa
    public void fillExp() {

        for (int i = 0; i < 101; i++) {
            if(i == 0 || i == 1) {
                tabelaExpa.add(i-1);
            }
            else{
                tabelaExpa.add((i * ((tabelaExpa.get(i-1)*(15/100)) + i * 15)));
            }
        }

    }

    //Wyświetlenie tabeli expa
    public void showExp(View view) {

        TextView staty = (TextView) findViewById(R.id.maintext);
        staty.setMovementMethod(new ScrollingMovementMethod());
        StringBuilder exp = new StringBuilder("");

        for (int i = 1; i < tabelaExpa.size(); i++) {
            exp.append("Level " + i + ": " + tabelaExpa.get(i).toString() + "\n");
            staty.setText(exp);
        }

    }

    //Wypełnienie tabeli magic expa
    public void fillmExp() {

        for (int i = 0; i < 101; i++) {
            if(i == 0 || i == 1) {
                tabelamExpa.add(i-1);
            }
            else{
                tabelamExpa.add((i * ((tabelamExpa.get(i-1)*(15/100)) + i * 20)));
            }
        }
    }

    //Odświeżenie statystyk
    public void odswiez(){

        for(int i = 100;i >= 0;i--){
            if(postac.exp >= tabelaExpa.get(i) && postac.exp > 59) {
                postac.lvl = i;

                //Sprawdzenie czy był awans poziomu
                if (postac.lvl > checkLvlAdvance){
                    if (postac.lvl%5 == 0) {
                        postac.atk += 1;
                        postac.def += 1;
                    }
                    postac.hp += 15;
                    postac.mana += 10;
                    if (postac.sp < postac.lvl - 1) {
                        postac.sp += 1;
                    }
                    checkLvlAdvance += 1;
                }
                break;
            }
        }

        //Sprawdzenie mlvlu
        for(int i = 100;i >= 0;i--){

            if(postac.mExp >= tabelamExpa.get(i) && postac.mExp > 59) {
                postac.mlvl = i;

                //Sprawdzenie czy był awans poziomu
                if (postac.mlvl > checkMlvlAdvance){
                    checkMlvlAdvance += 1;
                }
                break;
            }
        }

        //Sprawdzenie czy spadł poziom
        if(postac.exp < tabelaExpa.get(postac.lvl - 1)){
            postac.lvl -= 1;
            postac.atk -= 0;
            postac.def -= 0;
            postac.hp -= 15;
        }

        //Sprawdzenie czy spadł mlvl
        if (postac.mlvl > 0) {

            if (postac.mExp < tabelamExpa.get(postac.mlvl - 1)) {
                AlertDialog.Builder nieawans = new AlertDialog.Builder(this);
                nieawans.setMessage("You were downgraded from magic level " + postac.mlvl + " to level " + (postac.mlvl - 1) + "!")
                        .setPositiveButton("OK", new DialogInterface.OnClickListener() {
                            @Override
                            public void onClick(DialogInterface dialog, int which) {
                                dialog.dismiss();
                            }
                        })
                        .create();
                nieawans.show();
                postac.mlvl -= 1;
            }
        }

        //Sprawdzenie ekwipunku
        if (postac.sword.equals(miecz_0.name) && postac.atk < miecz_0.atk) {
            postac.atk += miecz_0.atk;
            if (postac.shield.equals(tarcza_0.name)) {
                postac.def += (miecz_0.def + tarcza_0.def);
            } else if (postac.shield.equals(tarcza_1.name)) {
                postac.def += (miecz_0.def + tarcza_1.def);
            } else if (postac.shield.equals(tarcza_2.name)) {
                postac.def += (miecz_0.def + tarcza_2.def);
            }
        } else if (postac.sword.equals(miecz_1.name) && postac.atk < miecz_1.atk) {
            postac.atk += miecz_1.atk;
            if (postac.shield.equals(tarcza_0.name)) {
                postac.def += (miecz_0.def + tarcza_0.def);
            } else if (postac.shield.equals(tarcza_1.name)) {
                postac.def += (miecz_0.def + tarcza_1.def);
            } else if (postac.shield.equals(tarcza_2.name)) {
                postac.def += (miecz_0.def + tarcza_2.def);
            }
        } else if (postac.sword.equals(miecz_2.name) && postac.atk < miecz_2.atk) {
            postac.atk += miecz_2.atk;
            if (postac.shield.equals(tarcza_0.name)) {
                postac.def += (miecz_0.def + tarcza_0.def);
            } else if (postac.shield.equals(tarcza_1.name)) {
                postac.def += (miecz_0.def + tarcza_1.def);
            } else if (postac.shield.equals(tarcza_2.name)) {
                postac.def += (miecz_0.def + tarcza_2.def);
            }
        }
    }

};



